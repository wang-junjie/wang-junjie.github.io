<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>俊杰的小站</title>
    <link href="https://wang-junjie.github.io/feed.xml" rel="self" />
    <link href="https://wang-junjie.github.io" />
    <updated>2019-02-26T23:02:01+08:00</updated>
    <author>
        <name>王俊杰</name>
    </author>
    <id>https://wang-junjie.github.io</id>

    <entry>
        <title>读《黑客与画家》</title>
        <author>
            <name>王俊杰</name>
        </author>
        <link href="https://wang-junjie.github.io/du-lesslesshei-ke-yu-hua-jia-greatergreater.html"/>
        <id>https://wang-junjie.github.io/du-lesslesshei-ke-yu-hua-jia-greatergreater.html</id>

        <updated>2019-02-26T23:01:23+08:00</updated>
            <summary>
                <![CDATA[
                    译者序中提到了六条”黑客伦理“： 1. 使用计算机以及所有有助于了解这个世界本质的事物都不应受到任何限制。 任何事情都应该亲手尝试。（Access to computers—and anything that might teach you something about the way the world works—should be unlimited and total. Always yield to the Hands-On Imperative!） 2. 信息应该全部免费。（All information should be free.） 3. 不信任权威， 提倡去中心化。（Mistrust Authority—Promote Decentralization.） 4. 判断一名黑客的水平应该看他的技术能力， 而不是看他的学历、 年龄或地位等其他标准。（Hackers should be&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>译者序中提到了六条”黑客伦理“：<br><br>1. 使用计算机以及所有有助于了解这个世界本质的事物都不应受到任何限制。 任何事情都应该亲手尝试。（Access to computers—and anything that might teach you something about the way the world works—should be unlimited and total. Always yield to the Hands-On Imperative!）<br>2. 信息应该全部免费。（All information should be free.）<br>3. 不信任权威， 提倡去中心化。（Mistrust Authority—Promote Decentralization.）<br>4. 判断一名黑客的水平应该看他的技术能力， 而不是看他的学历、 年龄或地位等其他标准。（Hackers should be judged by their hacking, not bogus criteria such as degrees, age, race, or position.）<br>5. 你可以用计算机创造美和艺术。（You can create art and beauty on a computer.）<br>6. 计算机使生活更美好。（Computers can change your life for the better.）</p>
<p> </p>
<p>评价一种语言的优劣不能简单地看最后的程序是否表达得很漂亮， 而要看程序从无到有的那条完成路径是否很漂亮。 某种设计使得最后的程序非常漂亮，但是不一定同时具备漂亮的编程过程。<br><br>我们常常采用错误的方法评价编程语言， 只看一眼最后完成的程序就做出判断。 同一个软件有两种不同语言开发的版本， 你发现其中一个版本比另一个版本短得多， 于是非常自信地认定前者的编程语言比后者的更好。 但是， 如果你从艺术创作的角度思考这个问题， 就不太可能这样评价编程语言。</p>
            ]]>
        </content>
    </entry>
</feed>
